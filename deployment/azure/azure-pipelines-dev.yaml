trigger:
- dev

pool:
  vmImage: ubuntu-latest

variables:
  containerRegistryServiceConnection: uniappsoigiga
  imageRepository: cost-model-dev
  imageTag: 0.3.12
  imageName: uniappsoigiga.azurecr.io/cost-model-dev:0.3.12
  hubImageRepository: k8s-hub-cds
  hubImageTag: 2.0.0
  hubImageName: uniappsoigiga.azurecr.io/k8s-hub-cds:2.0.0
  kubernetesServiceConnection: CostModel-DEV-uni-apps-aks-dev-ictd-oi-costmodel-dev-1684231758425
  kubernetesNamespace: ictd-oi-costmodel-dev
  dockerfilePath: $(Build.SourcesDirectory)/Dockerfile
  hubDockerfilePath: $(Build.SourcesDirectory)/Dockerfile.hub
  containerName: giga
  storageAccount: saunigiga
  workspaceDirectory: $(Build.SourcesDirectory)/notebooks
  helmValuesFile: $(Build.SourcesDirectory)/deployment/helm/prod.yaml
  helmReleaseName: jupyterhub
  jupyterhubHelmVersion: 2.0.0
  mapBoxToken: $(MAPBOX_TOKEN)
  adlsConnectionString: $(ADLS_CONNECTION_STRING)
  system.debug: true


steps:
- task: Docker@2
  displayName: Login to container Registry
  inputs:
    command: login
    containerRegistry: $(containerRegistryServiceConnection)

- task: Docker@2
  displayName: Build and push image to container registry
  inputs:
    command: buildAndPush
    repository: $(imageRepository)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(containerRegistryServiceConnection)
    tags: |
      $(imageTag)

- task: Docker@2
  displayName: Build and push hub image with extra dependencies to container registry
  inputs:
    command: buildAndPush
    repository: $(hubImageRepository)
    dockerfile: $(hubDockerfilePath)
    containerRegistry: $(containerRegistryServiceConnection)
    tags: |
      $(hubImageTag)

- task: Kubernetes@1
  displayName: Create secret for Mapbox token
  continueOnError: true
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
    command: create
    arguments: "secret generic mapbox-secrets --from-literal=mapbox-token=$(mapBoxToken)"
    namespace: $(kubernetesNamespace)

- task: Kubernetes@1
  displayName: Create secret for ADLS connection string
  continueOnError: true
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
    command: create
    arguments: "secret generic azure-secrets --from-literal=adls-connection-string=$(adlsConnectionString)"
    namespace: $(kubernetesNamespace)

- task: HelmDeploy@0
  displayName: 'Add JupyterHub Helm Repo'
  enabled: true
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
    command: 'repo'
    arguments: 'add jupyterhub https://jupyterhub.github.io/helm-chart/'
    namespace: $(kubernetesNamespace)

- task: HelmDeploy@0
  displayName: 'Update Helm Repo'
  enabled: true
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
    command: 'repo'
    arguments: 'update'
    namespace: $(kubernetesNamespace)

- task: HelmDeploy@0
  displayName: Helm deploy Jupyterhub
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
    command: upgrade
    chartType: Name
    chartName: jupyterhub/jupyterhub
    releaseName: $(helmReleaseName)
    valueFile: $(helmValuesFile)
    namespace: $(kubernetesNamespace)
    arguments: '--version $(jupyterhubHelmVersion) --timeout 20m'

- task: Kubernetes@1
  displayName: Set up Ingress
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: $(kubernetesServiceConnection)
    command: apply
    arguments: '-f deployment/azure/ingress.yaml'
    namespace: $(kubernetesNamespace)
